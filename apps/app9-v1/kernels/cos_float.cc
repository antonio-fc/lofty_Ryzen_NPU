#include <math.h>
#ifndef M_PI
    #define M_PI 3.14159265358979323846
#endif
#include "aie_api/aie.hpp"

alignas(aie::vector_decl_align) extern float cos_ilut_ab[512];
alignas(aie::vector_decl_align) extern float cos_ilut_cd[512];

aie::vector<uint32, 16> v16float_to_v16uint(aie::vector<float, 16> input) {
    // Convert float32 to int32
    // 0. Make sure there isn't an already implemented conversion function like bfloat16_to_int
    // 1. Extract mantissa bits using bit and with a broadcast  (put the 23 mantissa bits into a uint32 array starting at the LSB)
    aie::vector<uint32, 16> bitmap0 = aie::broadcast<uint32, 16>(0x007fffff);
    aie::vector<uint32, 16> mantissa = aie::bit_and(input.cast_to<uint32>(), bitmap0);
    mantissa = aie::add(mantissa, (uint32) 0x00800000); // putting the implicit 1 in bit 24
    // 2. Extract exponent bits (put the 8 mantissa bits into a int32 array starting at the LSB)
    aie::vector<uint32, 16> bitmap1 = aie::broadcast<uint32, 16>(0x7f800000);
    aie::vector<uint32, 16> exponent_unshifted = aie::bit_and(input.cast_to<uint32>(), bitmap1);
    aie::vector<uint32, 16> exponent_biased = aie::downshift(exponent_unshifted, 23);
    // 3. Substract the bias in the exponent (bias = 127) using a broadcast vector
    aie::vector<int32, 16> exponent_signed = aie::sub(exponent_biased.cast_to<int32>(), 127);
    // 4. Save the absolute value of the exponent in an uint32 vector
    aie::vector<int32, 16> exponent_abs = aie::abs(exponent_signed);
    // 5. Save the number of left and right shift for each element 
    aie::vector<uint32, 16> left = aie::downshift(aie::add(exponent_signed, exponent_abs), 1).cast_to<uint32>();
    aie::vector<uint32, 16> right = aie::downshift(aie::add(aie::neg(exponent_signed), exponent_abs), 1).cast_to<uint32>();
    // 6. Shift the mantissa vector according to the sign of the exponent (bitmap) and the exponent (vector)
    aie::vector<uint32, 16> index = mantissa;
    for (int i = 0; i < 16; i++) {
        index[i] = (index[i] << left[i]) >> right[i];
    }
    index = aie::downshift(index, 23);
    // 7. The resulting vector should contain the correct indexes
    return index;
}

__attribute__((always_inline))  aie::vector<float, 16> getCosFloat(aie::vector<float, 16> x) {
    float __aie_dm_resource_a *ilut_ab = (float __aie_dm_resource_a *)cos_ilut_ab;
    float __aie_dm_resource_b *ilut_cd = (float __aie_dm_resource_b *)cos_ilut_cd;
    
    using lut_type = aie::lut<4, float, float>;
    const int LUT_elems = 512;
    const int step_i = 0; // Optional lower bits that will be ignored for indexing the lut
    
    lut_type lut_i(LUT_elems, ilut_ab, ilut_cd);
    aie::parallel_lookup<uint16, lut_type, aie::lut_oor_policy::truncate> // index
    lookup_i(lut_i, step_i);
    
    auto index = v16float_to_v16uint(x);
    
    auto cos_result = lookup_i.fetch(index);
    
    return cos_result;
}

template <const int N>
void cos_float(float *restrict in, float *restrict out) {
    const int vec_size = 16;
    const int lut_size = 256;
    const float factor = lut_size / (M_PI / 2);   // index = x * lut_size / (pi/2)
    for (int i = 0; i < N; i += vec_size)
    chess_prepare_for_pipelining chess_loop_range(64, 64) {
        auto input_vec = aie::load_v<vec_size>(in + i); // loading input vector
        auto scaled_vec = aie::mul(input_vec, factor);
        aie::vector<float, vec_size> resultCos = getCosFloat(scaled_vec); // calling function for cos (calling the lut)
        aie::store_v(out + i, resultCos); // storing the result in the output
    }
    return;
}

extern "C" {
void cos_float_1024(float *a_in, float *c_out) {
    cos_float<1024>(a_in, c_out);
}
}

alignas(aie::vector_decl_align) float cos_ilut_ab[512] = { // the values shoud be in chunks of 128b according to the documentation
    0.000000f, 0.006136f, 0.012272f, 0.018408f, 0.000000f, 0.006136f, 0.012272f, 0.018408f,
    0.024544f, 0.030680f, 0.036816f, 0.042952f, 0.024544f, 0.030680f, 0.036816f, 0.042952f,
    0.049087f, 0.055223f, 0.061359f, 0.067495f, 0.049087f, 0.055223f, 0.061359f, 0.067495f,
    0.073631f, 0.079767f, 0.085903f, 0.092039f, 0.073631f, 0.079767f, 0.085903f, 0.092039f,
    0.098175f, 0.104311f, 0.110447f, 0.116583f, 0.098175f, 0.104311f, 0.110447f, 0.116583f,
    0.122718f, 0.128854f, 0.134990f, 0.141126f, 0.122718f, 0.128854f, 0.134990f, 0.141126f,
    0.147262f, 0.153398f, 0.159534f, 0.165670f, 0.147262f, 0.153398f, 0.159534f, 0.165670f,
    0.171806f, 0.177942f, 0.184078f, 0.190214f, 0.171806f, 0.177942f, 0.184078f, 0.190214f,
    0.196350f, 0.202485f, 0.208621f, 0.214757f, 0.196350f, 0.202485f, 0.208621f, 0.214757f,
    0.220893f, 0.227029f, 0.233165f, 0.239301f, 0.220893f, 0.227029f, 0.233165f, 0.239301f,
    0.245437f, 0.251573f, 0.257709f, 0.263845f, 0.245437f, 0.251573f, 0.257709f, 0.263845f,
    0.269981f, 0.276117f, 0.282252f, 0.288388f, 0.269981f, 0.276117f, 0.282252f, 0.288388f,
    0.294524f, 0.300660f, 0.306796f, 0.312932f, 0.294524f, 0.300660f, 0.306796f, 0.312932f,
    0.319068f, 0.325204f, 0.331340f, 0.337476f, 0.319068f, 0.325204f, 0.331340f, 0.337476f,
    0.343612f, 0.349748f, 0.355884f, 0.362020f, 0.343612f, 0.349748f, 0.355884f, 0.362020f,
    0.368156f, 0.374292f, 0.380428f, 0.386564f, 0.368156f, 0.374292f, 0.380428f, 0.386564f,
    0.392700f, 0.398836f, 0.404972f, 0.411108f, 0.392700f, 0.398836f, 0.404972f, 0.411108f,
    0.417244f, 0.423380f, 0.429516f, 0.435652f, 0.417244f, 0.423380f, 0.429516f, 0.435652f,
    0.441788f, 0.447924f, 0.454060f, 0.460196f, 0.441788f, 0.447924f, 0.454060f, 0.460196f,
    0.466332f, 0.472468f, 0.478604f, 0.484740f, 0.466332f, 0.472468f, 0.478604f, 0.484740f,
    0.490876f, 0.497012f, 0.503148f, 0.509284f, 0.490876f, 0.497012f, 0.503148f, 0.509284f,
    0.515420f, 0.521556f, 0.527692f, 0.533828f, 0.515420f, 0.521556f, 0.527692f, 0.533828f,
    0.539964f, 0.546100f, 0.552236f, 0.558372f, 0.539964f, 0.546100f, 0.552236f, 0.558372f,
    0.564508f, 0.570644f, 0.576780f, 0.582916f, 0.564508f, 0.570644f, 0.576780f, 0.582916f,
    0.589052f, 0.595188f, 0.601324f, 0.607460f, 0.589052f, 0.595188f, 0.601324f, 0.607460f,
    0.613596f, 0.619732f, 0.625868f, 0.632004f, 0.613596f, 0.619732f, 0.625868f, 0.632004f,
    0.638140f, 0.644276f, 0.650412f, 0.656548f, 0.638140f, 0.644276f, 0.650412f, 0.656548f,
    0.662684f, 0.668820f, 0.674956f, 0.681092f, 0.662684f, 0.668820f, 0.674956f, 0.681092f,
    0.687228f, 0.693364f, 0.699500f, 0.705636f, 0.687228f, 0.693364f, 0.699500f, 0.705636f,
    0.711772f, 0.717908f, 0.724044f, 0.730180f, 0.711772f, 0.717908f, 0.724044f, 0.730180f,
    0.736316f, 0.742452f, 0.748588f, 0.754724f, 0.736316f, 0.742452f, 0.748588f, 0.754724f,
    0.760860f, 0.766996f, 0.773132f, 0.779268f, 0.760860f, 0.766996f, 0.773132f, 0.779268f,
    0.785404f, 0.791540f, 0.797676f, 0.803812f, 0.785404f, 0.791540f, 0.797676f, 0.803812f,
    0.809948f, 0.816084f, 0.822220f, 0.828356f, 0.809948f, 0.816084f, 0.822220f, 0.828356f,
    0.834492f, 0.840628f, 0.846764f, 0.852900f, 0.834492f, 0.840628f, 0.846764f, 0.852900f,
    0.859036f, 0.865172f, 0.871308f, 0.877444f, 0.859036f, 0.865172f, 0.871308f, 0.877444f,
    0.883580f, 0.889716f, 0.895852f, 0.901988f, 0.883580f, 0.889716f, 0.895852f, 0.901988f,
    0.908124f, 0.914260f, 0.920396f, 0.926532f, 0.908124f, 0.914260f, 0.920396f, 0.926532f,
    0.932668f, 0.938804f, 0.944940f, 0.951076f, 0.932668f, 0.938804f, 0.944940f, 0.951076f,
    0.957212f, 0.963348f, 0.969484f, 0.975620f, 0.957212f, 0.963348f, 0.969484f, 0.975620f,
    0.981756f, 0.987892f, 0.994028f, 1.000164f, 0.981756f, 0.987892f, 0.994028f, 1.000164f,
    1.006300f, 1.012436f, 1.018572f, 1.024708f, 1.006300f, 1.012436f, 1.018572f, 1.024708f,
    1.030844f, 1.036980f, 1.043116f, 1.049252f, 1.030844f, 1.036980f, 1.043116f, 1.049252f,
    1.055388f, 1.061524f, 1.067660f, 1.073796f, 1.055388f, 1.061524f, 1.067660f, 1.073796f,
    1.079932f, 1.086068f, 1.092204f, 1.098340f, 1.079932f, 1.086068f, 1.092204f, 1.098340f,
    1.104476f, 1.110612f, 1.116748f, 1.122884f, 1.104476f, 1.110612f, 1.116748f, 1.122884f,
    1.129010f, 1.135146f, 1.141282f, 1.147418f, 1.129010f, 1.135146f, 1.141282f, 1.147418f,
    1.153554f, 1.159689f, 1.165825f, 1.171961f, 1.153554f, 1.159689f, 1.165825f, 1.171961f,
    1.178097f, 1.184233f, 1.190369f, 1.196505f, 1.178097f, 1.184233f, 1.190369f, 1.196505f,
    1.202641f, 1.208777f, 1.214913f, 1.221049f, 1.202641f, 1.208777f, 1.214913f, 1.221049f,
    1.227185f, 1.233321f, 1.239457f, 1.245592f, 1.227185f, 1.233321f, 1.239457f, 1.245592f,
    1.251728f, 1.257864f, 1.264000f, 1.270136f, 1.251728f, 1.257864f, 1.264000f, 1.270136f,
    1.276272f, 1.282408f, 1.288544f, 1.294680f, 1.276272f, 1.282408f, 1.288544f, 1.294680f,
    1.300816f, 1.306952f, 1.313088f, 1.319223f, 1.300816f, 1.306952f, 1.313088f, 1.319223f,
    1.325359f, 1.331495f, 1.337631f, 1.343767f, 1.325359f, 1.331495f, 1.337631f, 1.343767f,
    1.349903f, 1.356039f, 1.362175f, 1.368311f, 1.349903f, 1.356039f, 1.362175f, 1.368311f,
    1.374447f, 1.380583f, 1.386719f, 1.392855f, 1.374447f, 1.380583f, 1.386719f, 1.392855f,
    1.398990f, 1.405126f, 1.411262f, 1.417398f, 1.398990f, 1.405126f, 1.411262f, 1.417398f,
    1.423534f, 1.429670f, 1.435806f, 1.441942f, 1.423534f, 1.429670f, 1.435806f, 1.441942f,
    1.448078f, 1.454214f, 1.460350f, 1.466486f, 1.448078f, 1.454214f, 1.460350f, 1.466486f,
    1.472622f, 1.478757f, 1.484893f, 1.491029f, 1.472622f, 1.478757f, 1.484893f, 1.491029f,
    1.497165f, 1.503301f, 1.509437f, 1.515573f, 1.497165f, 1.503301f, 1.509437f, 1.515573f,
    1.521709f, 1.527845f, 1.533981f, 1.540117f, 1.521709f, 1.527845f, 1.533981f, 1.540117f,
    1.546253f, 1.552389f, 1.558524f, 1.564660f, 1.546253f, 1.552389f, 1.558524f, 1.564660f
};

alignas(aie::vector_decl_align) float cos_ilut_cd[512] = {
    0.000000f, 0.006136f, 0.012272f, 0.018408f, 0.000000f, 0.006136f, 0.012272f, 0.018408f,
    0.024544f, 0.030680f, 0.036816f, 0.042952f, 0.024544f, 0.030680f, 0.036816f, 0.042952f,
    0.049087f, 0.055223f, 0.061359f, 0.067495f, 0.049087f, 0.055223f, 0.061359f, 0.067495f,
    0.073631f, 0.079767f, 0.085903f, 0.092039f, 0.073631f, 0.079767f, 0.085903f, 0.092039f,
    0.098175f, 0.104311f, 0.110447f, 0.116583f, 0.098175f, 0.104311f, 0.110447f, 0.116583f,
    0.122718f, 0.128854f, 0.134990f, 0.141126f, 0.122718f, 0.128854f, 0.134990f, 0.141126f,
    0.147262f, 0.153398f, 0.159534f, 0.165670f, 0.147262f, 0.153398f, 0.159534f, 0.165670f,
    0.171806f, 0.177942f, 0.184078f, 0.190214f, 0.171806f, 0.177942f, 0.184078f, 0.190214f,
    0.196350f, 0.202485f, 0.208621f, 0.214757f, 0.196350f, 0.202485f, 0.208621f, 0.214757f,
    0.220893f, 0.227029f, 0.233165f, 0.239301f, 0.220893f, 0.227029f, 0.233165f, 0.239301f,
    0.245437f, 0.251573f, 0.257709f, 0.263845f, 0.245437f, 0.251573f, 0.257709f, 0.263845f,
    0.269981f, 0.276117f, 0.282252f, 0.288388f, 0.269981f, 0.276117f, 0.282252f, 0.288388f,
    0.294524f, 0.300660f, 0.306796f, 0.312932f, 0.294524f, 0.300660f, 0.306796f, 0.312932f,
    0.319068f, 0.325204f, 0.331340f, 0.337476f, 0.319068f, 0.325204f, 0.331340f, 0.337476f,
    0.343612f, 0.349748f, 0.355884f, 0.362020f, 0.343612f, 0.349748f, 0.355884f, 0.362020f,
    0.368156f, 0.374292f, 0.380428f, 0.386564f, 0.368156f, 0.374292f, 0.380428f, 0.386564f,
    0.392700f, 0.398836f, 0.404972f, 0.411108f, 0.392700f, 0.398836f, 0.404972f, 0.411108f,
    0.417244f, 0.423380f, 0.429516f, 0.435652f, 0.417244f, 0.423380f, 0.429516f, 0.435652f,
    0.441788f, 0.447924f, 0.454060f, 0.460196f, 0.441788f, 0.447924f, 0.454060f, 0.460196f,
    0.466332f, 0.472468f, 0.478604f, 0.484740f, 0.466332f, 0.472468f, 0.478604f, 0.484740f,
    0.490876f, 0.497012f, 0.503148f, 0.509284f, 0.490876f, 0.497012f, 0.503148f, 0.509284f,
    0.515420f, 0.521556f, 0.527692f, 0.533828f, 0.515420f, 0.521556f, 0.527692f, 0.533828f,
    0.539964f, 0.546100f, 0.552236f, 0.558372f, 0.539964f, 0.546100f, 0.552236f, 0.558372f,
    0.564508f, 0.570644f, 0.576780f, 0.582916f, 0.564508f, 0.570644f, 0.576780f, 0.582916f,
    0.589052f, 0.595188f, 0.601324f, 0.607460f, 0.589052f, 0.595188f, 0.601324f, 0.607460f,
    0.613596f, 0.619732f, 0.625868f, 0.632004f, 0.613596f, 0.619732f, 0.625868f, 0.632004f,
    0.638140f, 0.644276f, 0.650412f, 0.656548f, 0.638140f, 0.644276f, 0.650412f, 0.656548f,
    0.662684f, 0.668820f, 0.674956f, 0.681092f, 0.662684f, 0.668820f, 0.674956f, 0.681092f,
    0.687228f, 0.693364f, 0.699500f, 0.705636f, 0.687228f, 0.693364f, 0.699500f, 0.705636f,
    0.711772f, 0.717908f, 0.724044f, 0.730180f, 0.711772f, 0.717908f, 0.724044f, 0.730180f,
    0.736316f, 0.742452f, 0.748588f, 0.754724f, 0.736316f, 0.742452f, 0.748588f, 0.754724f,
    0.760860f, 0.766996f, 0.773132f, 0.779268f, 0.760860f, 0.766996f, 0.773132f, 0.779268f,
    0.785404f, 0.791540f, 0.797676f, 0.803812f, 0.785404f, 0.791540f, 0.797676f, 0.803812f,
    0.809948f, 0.816084f, 0.822220f, 0.828356f, 0.809948f, 0.816084f, 0.822220f, 0.828356f,
    0.834492f, 0.840628f, 0.846764f, 0.852900f, 0.834492f, 0.840628f, 0.846764f, 0.852900f,
    0.859036f, 0.865172f, 0.871308f, 0.877444f, 0.859036f, 0.865172f, 0.871308f, 0.877444f,
    0.883580f, 0.889716f, 0.895852f, 0.901988f, 0.883580f, 0.889716f, 0.895852f, 0.901988f,
    0.908124f, 0.914260f, 0.920396f, 0.926532f, 0.908124f, 0.914260f, 0.920396f, 0.926532f,
    0.932668f, 0.938804f, 0.944940f, 0.951076f, 0.932668f, 0.938804f, 0.944940f, 0.951076f,
    0.957212f, 0.963348f, 0.969484f, 0.975620f, 0.957212f, 0.963348f, 0.969484f, 0.975620f,
    0.981756f, 0.987892f, 0.994028f, 1.000164f, 0.981756f, 0.987892f, 0.994028f, 1.000164f,
    1.006300f, 1.012436f, 1.018572f, 1.024708f, 1.006300f, 1.012436f, 1.018572f, 1.024708f,
    1.030844f, 1.036980f, 1.043116f, 1.049252f, 1.030844f, 1.036980f, 1.043116f, 1.049252f,
    1.055388f, 1.061524f, 1.067660f, 1.073796f, 1.055388f, 1.061524f, 1.067660f, 1.073796f,
    1.079932f, 1.086068f, 1.092204f, 1.098340f, 1.079932f, 1.086068f, 1.092204f, 1.098340f,
    1.104476f, 1.110612f, 1.116748f, 1.122884f, 1.104476f, 1.110612f, 1.116748f, 1.122884f,
    1.129010f, 1.135146f, 1.141282f, 1.147418f, 1.129010f, 1.135146f, 1.141282f, 1.147418f,
    1.153554f, 1.159689f, 1.165825f, 1.171961f, 1.153554f, 1.159689f, 1.165825f, 1.171961f,
    1.178097f, 1.184233f, 1.190369f, 1.196505f, 1.178097f, 1.184233f, 1.190369f, 1.196505f,
    1.202641f, 1.208777f, 1.214913f, 1.221049f, 1.202641f, 1.208777f, 1.214913f, 1.221049f,
    1.227185f, 1.233321f, 1.239457f, 1.245592f, 1.227185f, 1.233321f, 1.239457f, 1.245592f,
    1.251728f, 1.257864f, 1.264000f, 1.270136f, 1.251728f, 1.257864f, 1.264000f, 1.270136f,
    1.276272f, 1.282408f, 1.288544f, 1.294680f, 1.276272f, 1.282408f, 1.288544f, 1.294680f,
    1.300816f, 1.306952f, 1.313088f, 1.319223f, 1.300816f, 1.306952f, 1.313088f, 1.319223f,
    1.325359f, 1.331495f, 1.337631f, 1.343767f, 1.325359f, 1.331495f, 1.337631f, 1.343767f,
    1.349903f, 1.356039f, 1.362175f, 1.368311f, 1.349903f, 1.356039f, 1.362175f, 1.368311f,
    1.374447f, 1.380583f, 1.386719f, 1.392855f, 1.374447f, 1.380583f, 1.386719f, 1.392855f,
    1.398990f, 1.405126f, 1.411262f, 1.417398f, 1.398990f, 1.405126f, 1.411262f, 1.417398f,
    1.423534f, 1.429670f, 1.435806f, 1.441942f, 1.423534f, 1.429670f, 1.435806f, 1.441942f,
    1.448078f, 1.454214f, 1.460350f, 1.466486f, 1.448078f, 1.454214f, 1.460350f, 1.466486f,
    1.472622f, 1.478757f, 1.484893f, 1.491029f, 1.472622f, 1.478757f, 1.484893f, 1.491029f,
    1.497165f, 1.503301f, 1.509437f, 1.515573f, 1.497165f, 1.503301f, 1.509437f, 1.515573f,
    1.521709f, 1.527845f, 1.533981f, 1.540117f, 1.521709f, 1.527845f, 1.533981f, 1.540117f,
    1.546253f, 1.552389f, 1.558524f, 1.564660f, 1.546253f, 1.552389f, 1.558524f, 1.564660f
};
