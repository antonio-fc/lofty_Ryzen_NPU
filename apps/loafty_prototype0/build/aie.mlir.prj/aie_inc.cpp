
// This file was auto-generated by aiecc.py --aie-generate-xaie.

#ifndef MLIR_AIE_QUIET
#define __mlir_aie_verbose(x) x
#else
#define __mlir_aie_verbose(x)
#endif

// The following is a wrapper for the common "if(call() != 0) return 1" pattern.
// Use this only in functions that return int. If the call this wrapper is used
// on does not succeed, the expanded code will exit out of the function
// containing this macro with an error code.
#define __mlir_aie_try(x) do { \
  AieRC ret = (x); \
  if(ret != XAIE_OK) { \
    return x; \
  } \
} while(0)

static XAie_DmaDimDesc *__mlir_aie_alloc_dim_desc(size_t ndims) {
  XAie_DmaDimDesc *ret = NULL;
  ret = (XAie_DmaDimDesc *)calloc(sizeof(XAie_DmaDimDesc), ndims);
  if(NULL == ret) {
    __mlir_aie_verbose(fprintf(stderr, "Allocating DmaDimDesc failed.\n"));
  }
  return ret;
}

aie_libxaie_ctx_t* mlir_aie_init_libxaie() {
  aie_libxaie_ctx_t *ctx = new aie_libxaie_ctx_t;
  if (!ctx)
    return 0;
  ctx->AieConfigPtr.AieGen = XAIE_DEV_GEN_AIEML;
  ctx->AieConfigPtr.BaseAddr = 0x20000000000;
  ctx->AieConfigPtr.ColShift = 25;
  ctx->AieConfigPtr.RowShift = 20;
  ctx->AieConfigPtr.NumRows = 6;
  ctx->AieConfigPtr.NumCols = 4;
  ctx->AieConfigPtr.ShimRowNum = 0;
  ctx->AieConfigPtr.MemTileRowStart = 1;
  ctx->AieConfigPtr.MemTileNumRows = 1;
  //  ctx->AieConfigPtr.ReservedRowStart = XAIE_RES_TILE_ROW_START;
  //  ctx->AieConfigPtr.ReservedNumRows  = XAIE_RES_TILE_NUM_ROWS;
  ctx->AieConfigPtr.AieTileRowStart = 2;
  ctx->AieConfigPtr.AieTileNumRows = 4;
  ctx->AieConfigPtr.PartProp = {0};
  ctx->DevInst = {0};
  return ctx;
}

int mlir_aie_configure_cores(aie_libxaie_ctx_t* ctx) {
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(0,2)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(0,2)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,2), XAie_LockInit(l, 0x0), 0));
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(0,3)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(0,3), (const char*)"core_0_3.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 0, 3, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(0,4)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(0,4)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(0,4), (const char*)"core_0_4.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 0, 4, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(0,5)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,5), XAie_LockInit(l, 0x0), 0));
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(1,2)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(1,2)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(1,2), (const char*)"core_1_2.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 1, 2, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(1,3)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(1,3)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(1,3), (const char*)"core_1_3.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 1, 3, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(1,4)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(1,4)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(1,4), (const char*)"core_1_4.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 1, 4, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(1,5)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(1,5)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,5), XAie_LockInit(l, 0x0), 0));
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(2,2)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(2,2)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(2,2), (const char*)"core_2_2.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 2, 2, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(2,3)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(2,3)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(2,3), (const char*)"core_2_3.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 2, 3, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(2,4)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(2,4)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(2,4), (const char*)"core_2_4.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 2, 4, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(2,5)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(2,5)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,5), XAie_LockInit(l, 0x0), 0));
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(3,2)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(3,2)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(l, 0x0), 0));
{
AieRC RC = XAie_LoadElf(&(ctx->DevInst), XAie_TileLoc(3,2), (const char*)"core_3_2.elf",0);
if (RC != XAIE_OK)
    __mlir_aie_verbose(fprintf(stderr, "Failed to load elf for Core[%d,%d], ret is %d\n", 3, 2, RC));
assert(RC == XAIE_OK);
}
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(3,3)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(3,3)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,3), XAie_LockInit(l, 0x0), 0));
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(3,4)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(3,4)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,4), XAie_LockInit(l, 0x0), 0));
__mlir_aie_try(XAie_CoreReset(&(ctx->DevInst), XAie_TileLoc(3,5)));
__mlir_aie_try(XAie_CoreDisable(&(ctx->DevInst), XAie_TileLoc(3,5)));
for (int l = 0; l < 16; ++l)
  __mlir_aie_try(XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,5), XAie_LockInit(l, 0x0), 0));
return XAIE_OK;
} // mlir_aie_configure_cores

int mlir_aie_start_cores(aie_libxaie_ctx_t* ctx) {
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(0,2)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(0,2)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(0,4)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(0,4)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(0,5)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(1,2)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(1,2)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(1,3)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(1,3)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(1,4)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(1,4)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(1,5)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(1,5)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(2,2)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(2,2)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(2,3)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(2,3)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(2,4)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(2,4)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(2,5)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(2,5)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(3,2)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(3,2)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(3,3)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(3,3)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(3,4)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(3,4)));
__mlir_aie_try(XAie_CoreUnreset(&(ctx->DevInst), XAie_TileLoc(3,5)));
__mlir_aie_try(XAie_CoreEnable(&(ctx->DevInst), XAie_TileLoc(3,5)));
return XAIE_OK;
} // mlir_aie_start_cores

int mlir_aie_configure_dmas(aie_libxaie_ctx_t* ctx) {
XAie_DmaDesc dma_tile03_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile03_bd0), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile03_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile03_bd0), /* addrA */ 0xC00,  /* len */ 4));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile03_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile03_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile03_bd0), XAie_TileLoc(0,3),  /* bd */ 0));
XAie_DmaDesc dma_tile03_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile03_bd1), XAie_TileLoc(0,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile03_bd1), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile03_bd1), /* addrA */ 0x4800,  /* len */ 4));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile03_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile03_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile03_bd1), XAie_TileLoc(0,3),  /* bd */ 1));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(0,3), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(0,3), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
XAie_DmaDesc dma_tile14_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile14_bd0), XAie_TileLoc(1,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile14_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile14_bd0), /* addrA */ 0x8000,  /* len */ 2048));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile14_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile14_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile14_bd0), XAie_TileLoc(1,4),  /* bd */ 0));
XAie_DmaDesc dma_tile14_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile14_bd1), XAie_TileLoc(1,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile14_bd1), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile14_bd1), /* addrA */ 0xC000,  /* len */ 2048));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile14_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile14_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile14_bd1), XAie_TileLoc(1,4),  /* bd */ 1));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,4), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,4), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
XAie_DmaDesc dma_tile12_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile12_bd0), XAie_TileLoc(1,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile12_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile12_bd0), /* addrA */ 0x8000,  /* len */ 2048));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile12_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile12_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile12_bd0), XAie_TileLoc(1,2),  /* bd */ 0));
XAie_DmaDesc dma_tile12_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile12_bd1), XAie_TileLoc(1,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile12_bd1), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile12_bd1), /* addrA */ 0xC000,  /* len */ 2048));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile12_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile12_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile12_bd1), XAie_TileLoc(1,2),  /* bd */ 1));
XAie_DmaDesc dma_tile12_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile12_bd2), XAie_TileLoc(1,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile12_bd2), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile12_bd2), /* addrA */ 0xC00,  /* len */ 4));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile12_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile12_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile12_bd2), XAie_TileLoc(1,2),  /* bd */ 2));
XAie_DmaDesc dma_tile12_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile12_bd3), XAie_TileLoc(1,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile12_bd3), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile12_bd3), /* addrA */ 0x4800,  /* len */ 4));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile12_bd3),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile12_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile12_bd3), XAie_TileLoc(1,2),  /* bd */ 3));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,2), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,2), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,2), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,2), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
XAie_DmaDesc dma_tile22_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile22_bd0), XAie_TileLoc(2,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile22_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile22_bd0), /* addrA */ 0x8000,  /* len */ 2048));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile22_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile22_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile22_bd0), XAie_TileLoc(2,2),  /* bd */ 0));
XAie_DmaDesc dma_tile22_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile22_bd1), XAie_TileLoc(2,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile22_bd1), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile22_bd1), /* addrA */ 0xC000,  /* len */ 2048));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile22_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile22_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile22_bd1), XAie_TileLoc(2,2),  /* bd */ 1));
XAie_DmaDesc dma_tile22_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile22_bd2), XAie_TileLoc(2,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile22_bd2), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile22_bd2), /* addrA */ 0xC00,  /* len */ 4));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile22_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile22_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile22_bd2), XAie_TileLoc(2,2),  /* bd */ 2));
XAie_DmaDesc dma_tile22_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile22_bd3), XAie_TileLoc(2,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile22_bd3), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile22_bd3), /* addrA */ 0x4800,  /* len */ 4));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile22_bd3),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile22_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile22_bd3), XAie_TileLoc(2,2),  /* bd */ 3));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,2), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,2), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,2), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,2), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
XAie_DmaDesc dma_tile32_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile32_bd0), XAie_TileLoc(3,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile32_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile32_bd0), /* addrA */ 0x8000,  /* len */ 2048));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile32_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile32_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile32_bd0), XAie_TileLoc(3,2),  /* bd */ 0));
XAie_DmaDesc dma_tile32_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile32_bd1), XAie_TileLoc(3,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile32_bd1), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile32_bd1), /* addrA */ 0xC000,  /* len */ 2048));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile32_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile32_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile32_bd1), XAie_TileLoc(3,2),  /* bd */ 1));
XAie_DmaDesc dma_tile32_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile32_bd2), XAie_TileLoc(3,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile32_bd2), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile32_bd2), /* addrA */ 0xC00,  /* len */ 4));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile32_bd2),  /* nextbd */ 3,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile32_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile32_bd2), XAie_TileLoc(3,2),  /* bd */ 2));
XAie_DmaDesc dma_tile32_bd3;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile32_bd3), XAie_TileLoc(3,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile32_bd3), XAie_LockInit(2,-1),XAie_LockInit(3,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile32_bd3), /* addrA */ 0x4800,  /* len */ 4));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile32_bd3),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile32_bd3)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile32_bd3), XAie_TileLoc(3,2),  /* bd */ 3));
XAie_DmaDesc dma_tile32_bd4;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile32_bd4), XAie_TileLoc(3,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile32_bd4), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile32_bd4), /* addrA */ 0x400,  /* len */ 2048));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile32_bd4),  /* nextbd */ 5,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile32_bd4)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile32_bd4), XAie_TileLoc(3,2),  /* bd */ 4));
XAie_DmaDesc dma_tile32_bd5;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile32_bd5), XAie_TileLoc(3,2)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile32_bd5), XAie_LockInit(5,-1),XAie_LockInit(4,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile32_bd5), /* addrA */ 0x4000,  /* len */ 2048));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile32_bd5),  /* nextbd */ 4,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile32_bd5)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile32_bd5), XAie_TileLoc(3,2),  /* bd */ 5));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,2), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,2), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,2), /* ChNum */1, /* dmaDir */ DMA_S2MM, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,2), /* ChNum */ 1, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(3,2), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */4, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(3,2), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile23_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile23_bd0), XAie_TileLoc(2,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile23_bd0), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile23_bd0), /* addrA */ 0x400,  /* len */ 2048));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile23_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile23_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile23_bd0), XAie_TileLoc(2,3),  /* bd */ 0));
XAie_DmaDesc dma_tile23_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile23_bd1), XAie_TileLoc(2,3)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile23_bd1), XAie_LockInit(0,-1),XAie_LockInit(1,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile23_bd1), /* addrA */ 0x4000,  /* len */ 2048));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile23_bd1),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile23_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile23_bd1), XAie_TileLoc(2,3),  /* bd */ 1));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,3), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,3), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
XAie_DmaDesc dma_tile24_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile24_bd0), XAie_TileLoc(2,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile24_bd0), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile24_bd0), /* addrA */ 0x400,  /* len */ 4));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile24_bd0),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile24_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile24_bd0), XAie_TileLoc(2,4),  /* bd */ 0));
XAie_DmaDesc dma_tile24_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile24_bd1), XAie_TileLoc(2,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile24_bd1), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile24_bd1), /* addrA */ 0x4000,  /* len */ 4));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile24_bd1),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile24_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile24_bd1), XAie_TileLoc(2,4),  /* bd */ 1));
XAie_DmaDesc dma_tile24_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile24_bd2), XAie_TileLoc(2,4)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile24_bd2), XAie_LockInit(3,-1),XAie_LockInit(2,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile24_bd2), /* addrA */ 0x8000,  /* len */ 4));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile24_bd2),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile24_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile24_bd2), XAie_TileLoc(2,4),  /* bd */ 2));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,4), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,4), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile11_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd0), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd0), XAie_LockInit(64,-3),XAie_LockInit(65,3)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile11_bd0), /* addrA */ 0x80000,  /* len */ 6144));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd0),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd0), XAie_TileLoc(1,1),  /* bd */ 0));
XAie_DmaDesc dma_tile11_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd1), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd1), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile11_bd1), /* addrA */ 0x80000,  /* len */ 2048));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd1),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd1), XAie_TileLoc(1,1),  /* bd */ 1));
XAie_DmaDesc dma_tile11_bd24;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd24), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd24), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile11_bd24), /* addrA */ 0x80800,  /* len */ 2048));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd24),  /* nextbd */ 24,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd24)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd24), XAie_TileLoc(1,1),  /* bd */ 24));
XAie_DmaDesc dma_tile11_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile11_bd2), XAie_TileLoc(1,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile11_bd2), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile11_bd2), /* addrA */ 0x81000,  /* len */ 2048));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile11_bd2),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile11_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile11_bd2), XAie_TileLoc(1,1),  /* bd */ 2));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */1, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */1, /* dmaDir */ DMA_MM2S, /* BdNum */24, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */ 1, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */2, /* dmaDir */ DMA_MM2S, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(1,1), /* ChNum */ 2, /* dmaDir */ DMA_MM2S));
XAie_DmaDesc dma_tile21_bd0;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd0), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd0), XAie_LockInit(64,-3),XAie_LockInit(65,3)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile21_bd0), /* addrA */ 0x80000,  /* len */ 12));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd0),  /* nextbd */ 0,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd0)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd0), XAie_TileLoc(2,1),  /* bd */ 0));
XAie_DmaDesc dma_tile21_bd1;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd1), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd1), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile21_bd1), /* addrA */ 0x80000,  /* len */ 4));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd1),  /* nextbd */ 1,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd1)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd1), XAie_TileLoc(2,1),  /* bd */ 1));
XAie_DmaDesc dma_tile21_bd24;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd24), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd24), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile21_bd24), /* addrA */ 0x80004,  /* len */ 4));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd24),  /* nextbd */ 24,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd24)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd24), XAie_TileLoc(2,1),  /* bd */ 24));
XAie_DmaDesc dma_tile21_bd2;
__mlir_aie_try(XAie_DmaDescInit(&(ctx->DevInst), &(dma_tile21_bd2), XAie_TileLoc(2,1)));
__mlir_aie_try(XAie_DmaSetLock(&(dma_tile21_bd2), XAie_LockInit(65,-1),XAie_LockInit(64,1)));
__mlir_aie_try(XAie_DmaSetAddrLen(&(dma_tile21_bd2), /* addrA */ 0x80008,  /* len */ 4));
__mlir_aie_try(XAie_DmaSetNextBd(&(dma_tile21_bd2),  /* nextbd */ 2,  /* enableNextBd */ 1));
__mlir_aie_try(XAie_DmaEnableBd(&(dma_tile21_bd2)));
__mlir_aie_try(XAie_DmaWriteBd(&(ctx->DevInst), &(dma_tile21_bd2), XAie_TileLoc(2,1),  /* bd */ 2));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */0, /* dmaDir */ DMA_S2MM, /* BdNum */0, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */ 0, /* dmaDir */ DMA_S2MM));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */0, /* dmaDir */ DMA_MM2S, /* BdNum */1, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */ 0, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */1, /* dmaDir */ DMA_MM2S, /* BdNum */24, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */ 1, /* dmaDir */ DMA_MM2S));
__mlir_aie_try(XAie_DmaChannelSetStartQueue(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */2, /* dmaDir */ DMA_MM2S, /* BdNum */2, /* Repeat */ 1, /* EnToken */ XAIE_DISABLE));
__mlir_aie_try(XAie_DmaChannelEnable(&(ctx->DevInst), XAie_TileLoc(2,1), /* ChNum */ 2, /* dmaDir */ DMA_MM2S));
return XAIE_OK;
} // mlir_aie_configure_dmas

int mlir_aie_initialize_locks(aie_libxaie_ctx_t* ctx) {
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,0), XAie_LockInit(0, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,0), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(2, 3)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(0, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(2, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(0, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(4, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(2, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(0, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(4, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(0, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(4, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(4, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(5, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(2, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(2, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(2, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(0, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(0, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(0, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,1), XAie_LockInit(0, 3)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(2,1), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(2, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(0, 3)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(0, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(0, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(2, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(3, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(0, 2)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(1, 0)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(0, 1)));
__mlir_aie_try(XAie_LockSetValue(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(1, 0)));
return XAIE_OK;
} // mlir_aie_initialize_locks
int mlir_aie_configure_switchboxes(aie_libxaie_ctx_t* ctx) {
  int x, y;
// Core Stream Switch column 0 row 0
x = 0;
y = 0;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 7, EAST, 3));
__mlir_aie_try(XAie_StrmPktSwMstrPortEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, /* drop_header */ XAIE_SS_PKT_DONOT_DROP_HEADER, /* arbiter */ 5, /* MSelEn */ 0x8));
__mlir_aie_try(XAie_StrmPktSwSlavePortEnable(&(ctx->DevInst), XAie_TileLoc(x,y), CTRL, 0));
__mlir_aie_try(XAie_StrmPktSwSlaveSlotEnable(&(ctx->DevInst), XAie_TileLoc(x,y), CTRL, 0, /* slot */ 0, /* packet */ XAie_PacketInit(15,0), /* mask */ 0x1F, /* msel */ 3, /* arbiter */ 5));
// Core Stream Switch column 0 row 1
x = 0;
y = 1;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, NORTH, 1));
// Core Stream Switch column 0 row 2
x = 0;
y = 2;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, NORTH, 0));
// Core Stream Switch column 0 row 3
x = 0;
y = 3;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, DMA, 0));
// Core Stream Switch column 1 row 0
x = 1;
y = 0;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 3, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 7, EAST, 3));
__mlir_aie_try(XAie_StrmPktSwMstrPortEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, /* drop_header */ XAIE_SS_PKT_DONOT_DROP_HEADER, /* arbiter */ 5, /* MSelEn */ 0x8));
__mlir_aie_try(XAie_StrmPktSwSlavePortEnable(&(ctx->DevInst), XAie_TileLoc(x,y), CTRL, 0));
__mlir_aie_try(XAie_StrmPktSwSlaveSlotEnable(&(ctx->DevInst), XAie_TileLoc(x,y), CTRL, 0, /* slot */ 0, /* packet */ XAie_PacketInit(15,0), /* mask */ 0x1F, /* msel */ 3, /* arbiter */ 5));
// Core Stream Switch column 1 row 1
x = 1;
y = 1;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 1, NORTH, 5));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 2, NORTH, 3));
// Core Stream Switch column 1 row 2
x = 1;
y = 2;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, NORTH, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 5, EAST, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 3, EAST, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), EAST, 3, DMA, 1));
// Core Stream Switch column 1 row 3
x = 1;
y = 3;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, NORTH, 0));
// Core Stream Switch column 1 row 4
x = 1;
y = 4;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, DMA, 0));
// Core Stream Switch column 2 row 0
x = 2;
y = 0;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 3, NORTH, 2));
__mlir_aie_try(XAie_StrmPktSwMstrPortEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, /* drop_header */ XAIE_SS_PKT_DONOT_DROP_HEADER, /* arbiter */ 5, /* MSelEn */ 0x8));
__mlir_aie_try(XAie_StrmPktSwSlavePortEnable(&(ctx->DevInst), XAie_TileLoc(x,y), CTRL, 0));
__mlir_aie_try(XAie_StrmPktSwSlaveSlotEnable(&(ctx->DevInst), XAie_TileLoc(x,y), CTRL, 0, /* slot */ 0, /* packet */ XAie_PacketInit(15,0), /* mask */ 0x1F, /* msel */ 3, /* arbiter */ 5));
// Core Stream Switch column 2 row 1
x = 2;
y = 1;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 2, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, NORTH, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 1, NORTH, 5));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 2, NORTH, 0));
// Core Stream Switch column 2 row 2
x = 2;
y = 2;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 3, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 2, EAST, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 1, WEST, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 5, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, EAST, 3));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 0, EAST, 2));
// Core Stream Switch column 3 row 2
x = 3;
y = 2;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 1, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 3, DMA, 1));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, NORTH, 2));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), WEST, 2, SOUTH, 3));
// Core Stream Switch column 2 row 3
x = 2;
y = 3;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), EAST, 1, DMA, 0));
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 1, SOUTH, 0));
// Core Stream Switch column 3 row 3
x = 3;
y = 3;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 2, WEST, 1));
// Core Stream Switch column 2 row 4
x = 2;
y = 4;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), DMA, 0, SOUTH, 1));
// Core Stream Switch column 3 row 0
x = 3;
y = 0;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 3, SOUTH, 2));
__mlir_aie_try(XAie_StrmPktSwMstrPortEnable(&(ctx->DevInst), XAie_TileLoc(x,y), SOUTH, 0, /* drop_header */ XAIE_SS_PKT_DONOT_DROP_HEADER, /* arbiter */ 5, /* MSelEn */ 0x8));
__mlir_aie_try(XAie_StrmPktSwSlavePortEnable(&(ctx->DevInst), XAie_TileLoc(x,y), CTRL, 0));
__mlir_aie_try(XAie_StrmPktSwSlaveSlotEnable(&(ctx->DevInst), XAie_TileLoc(x,y), CTRL, 0, /* slot */ 0, /* packet */ XAie_PacketInit(15,0), /* mask */ 0x1F, /* msel */ 3, /* arbiter */ 5));
// Core Stream Switch column 3 row 1
x = 3;
y = 1;
__mlir_aie_try(XAie_StrmConnCctEnable(&(ctx->DevInst), XAie_TileLoc(x,y), NORTH, 3, SOUTH, 3));
// ShimMux column 0 row 0
// NOTE ShimMux always connects from the south as directions are defined relative to the tile stream switch
x = 0;
y = 0;
__mlir_aie_try(XAie_EnableShimDmaToAieStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 3));
__mlir_aie_try(XAie_EnableShimDmaToAieStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 7));
// ShimMux column 1 row 0
// NOTE ShimMux always connects from the south as directions are defined relative to the tile stream switch
x = 1;
y = 0;
__mlir_aie_try(XAie_EnableShimDmaToAieStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 3));
__mlir_aie_try(XAie_EnableShimDmaToAieStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 7));
// ShimMux column 3 row 0
// NOTE ShimMux always connects from the south as directions are defined relative to the tile stream switch
x = 3;
y = 0;
__mlir_aie_try(XAie_EnableAieToShimDmaStrmPort(&(ctx->DevInst), XAie_TileLoc(x,y), 2));
return XAIE_OK;
} // mlir_aie_configure_switchboxes

int mlir_aie_configure_cascade(aie_libxaie_ctx_t* ctx) {
return XAIE_OK;
} // mlir_aie_configure_cascade

// buffer in3_cons_buff_0 with unsupported type memref<6xbf16>;
// buffer of_meanF_buff_0 with unsupported type memref<1024xbf16>;
// buffer of_meanF_buff_1 with unsupported type memref<1024xbf16>;
// buffer in1_cons_buff_0 with unsupported type memref<1024xbf16>;
// buffer in1_cons_buff_1 with unsupported type memref<1024xbf16>;
// buffer of_multE_buff_0 with unsupported type memref<1024xbf16>;
// buffer of_multE_buff_1 with unsupported type memref<1024xbf16>;
// buffer addA1_cons_buff_0 with unsupported type memref<1024xbf16>;
// buffer addA1_cons_buff_1 with unsupported type memref<1024xbf16>;
// buffer of_cosD_buff_0 with unsupported type memref<1024xbf16>;
// buffer of_cosD_buff_1 with unsupported type memref<1024xbf16>;
// buffer of_scaleC_buff_0 with unsupported type memref<1024xbf16>;
// buffer of_scaleC_buff_1 with unsupported type memref<1024xbf16>;
// buffer in0_cons_buff_0 with unsupported type memref<2xbf16>;
// buffer in0_cons_buff_1 with unsupported type memref<2xbf16>;
// buffer out_buff_0 with unsupported type memref<2xbf16>;
// buffer out_buff_1 with unsupported type memref<2xbf16>;
// buffer out_buff_2 with unsupported type memref<2xbf16>;
// buffer of_meanG_buff_0 with unsupported type memref<2xbf16>;
// buffer of_meanG_buff_1 with unsupported type memref<2xbf16>;
// buffer addB1_buff_0 with unsupported type memref<1024xbf16>;
// buffer addB1_buff_1 with unsupported type memref<1024xbf16>;
// buffer addA0_buff_0 with unsupported type memref<1024xbf16>;
// buffer addA0_buff_1 with unsupported type memref<1024xbf16>;
// buffer m_cons_buff_0 with unsupported type memref<2xbf16>;
// buffer m_cons_buff_1 with unsupported type memref<2xbf16>;
// buffer v_cons_buff_0 with unsupported type memref<1024xbf16>;
// buffer v_cons_buff_1 with unsupported type memref<1024xbf16>;
// buffer addB0_buff_0 with unsupported type memref<1024xbf16>;
// buffer addB0_buff_1 with unsupported type memref<1024xbf16>;
// buffer l_cons_buff_0 with unsupported type memref<2xbf16>;
// buffer l_cons_buff_1 with unsupported type memref<2xbf16>;
// buffer u_cons_buff_0 with unsupported type memref<1024xbf16>;
// buffer u_cons_buff_1 with unsupported type memref<1024xbf16>;
// buffer addA1_buff_0 with unsupported type memref<1024xbf16>;
// buffer addA1_buff_1 with unsupported type memref<1024xbf16>;
// buffer n_cons_buff_0 with unsupported type memref<2xbf16>;
// buffer n_cons_buff_1 with unsupported type memref<2xbf16>;
// buffer w_cons_buff_0 with unsupported type memref<1024xbf16>;
// buffer w_cons_buff_1 with unsupported type memref<1024xbf16>;
// buffer in2_cons_buff_0 with unsupported type memref<3072xbf16>;
int mlir_aie_acquire_out_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_out_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_out_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_out_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_out_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_out_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_out_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_out_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_of_meanG_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_of_meanG_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_of_meanG_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_of_meanG_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_of_meanF_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_of_meanF_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_of_meanF_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_of_meanF_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_of_multE_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_of_multE_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_of_multE_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_of_multE_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_of_cosD_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_of_cosD_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_of_cosD_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_of_cosD_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_of_scaleC_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_of_scaleC_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_of_scaleC_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_of_scaleC_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_addB1_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_addB1_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_addB1_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_addB1_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_addB0_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_addB0_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_addB0_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_addB0_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_addA1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_addA1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_addA1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_addA1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_addA1_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_addA1_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_addA1_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_addA1_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_addA0_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_addA0_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 4;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_addA0_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_addA0_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 5;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_n_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_n_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_n_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_n_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_m_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_m_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_m_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_m_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_l_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_l_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_l_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_l_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_w_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_w_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_w_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_w_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(3,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_v_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_v_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_v_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_v_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_u_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_u_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_u_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_u_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,2), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_in3_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_in3_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_in3_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(2,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_in3_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(2,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_in3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_in3_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_in3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_in3_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_in2_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_in2_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_in2_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_in2_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,1), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_in2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_in2_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_in2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_in2_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_in1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_in1_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_in1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_in1_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(1,4), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_in1_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_in1_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 2;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_in1_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_in1_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 3;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_in0_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_in0_cons_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_in0_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_in0_cons_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,3), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_in0_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_in0_prod_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 0;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_acquire_in0_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockAcquire(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
int mlir_aie_release_in0_cons_lock(aie_libxaie_ctx_t* ctx, int value, int timeout) {
  const int id = 1;
  return XAie_LockRelease(&(ctx->DevInst), XAie_TileLoc(0,0), XAie_LockInit(id,value), timeout);
}
